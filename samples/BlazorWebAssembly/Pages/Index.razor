@page "/"

@inject IToastService toastService

<div class="rounded-xl p-4 shadow-xl bg-gray-50 mx-auto w-1/3">

    <h1 class="text-2xl text-gray-800 mb-4">Blazor Tailwind Toast</h1>


    <form @onsubmit="AddModal">

        <div class="grid grid-cols-3 gap-1">
            <label class="block font-medium text-gray-700 p-2">
                Level
            </label>
            <div class="flex rounded-md shadow-sm col-span-2">
                <select class="focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full rounded-md sm: border-gray-300 p-2" @bind="Level" required>
                    @foreach (var level in Enum.GetValues(typeof(ToastLevel)))
                    {
                        <option value="@level">@level.ToString()</option>
                    }
                </select>
            </div>

            <label class="block font-medium text-gray-700 p-2">
                Position
            </label>
            <div class="flex rounded-md shadow-sm col-span-2">
                <select class="focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full rounded-md sm: border-gray-300 p-2" @bind="Position" required>
                    @foreach (var level in Enum.GetValues(typeof(ToastPosition)))
                    {
                        <option value="@level">@level.ToString()</option>
                    }
                </select>
            </div>

            <label class="block font-medium text-gray-700 p-2">
                Heading
            </label>
            <div class="flex rounded-md shadow-sm col-span-2">
                <input type="text" class="focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full rounded-md sm: border-gray-300 p-2" @bind="Heading" />
            </div>

            <label class="block  font-medium text-gray-700 p-2">
                Message
            </label>
            <div class="flex rounded-md shadow-sm col-span-2">
                <textarea class="focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full rounded-md sm: border-gray-300 p-2" @bind="Message" required />
            </div>

            <label class="block  font-medium text-gray-700 p-2">
                Timeout
            </label>
            <div class="flex rounded-md shadow-sm col-span-2">
                <input type="number" class="focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full rounded-md sm: border-gray-300 p-2" @bind="Timeout" required />
            </div>

            <label class="block  font-medium text-gray-700 p-2">
                Include action
            </label>
            <div class="flex col-span-2 py-1">
                <input type="checkbox" class="form-checkbox h-5 w-5 text-indigo-600 rounded-md border-gray-300" @bind="IncludeAction">
            </div>



        </div>

        <div class="pt-2 flex justify-around">
            <button type="submit" class="inline-flex justify-center p-2 border border-transparent shadow-sm  font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                Add Toast
            </button>
            <button type="button" @onclick="AddRandom" class="inline-flex justify-center p-2 border border-transparent shadow-sm  font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Random
            </button>
            <button type="button" @onclick="() => toastService.ShowToast(Message,Heading)" class="inline-flex justify-center p-2 border border-transparent shadow-sm  font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                Simple
            </button>
        </div>

    </form>
</div>

@code
{
    private Random rnd { get; set; } = new Random();
    private ToastLevel Level { get; set; } = ToastLevel.Info;
    private ToastPosition Position { get; set; } = ToastPosition.TopRight;
    private string Heading { get; set; } = "Header";
    private string Message { get; set; } = "Message";
    private int Timeout { get; set; } = 5000;
    bool IncludeAction { get; set; }

    private void PostToConsole()
    {
        Console.WriteLine($"Toast clicked at {DateTime.Now.ToLongTimeString()}");
    }

    private void AddModal()
    {

        var options = new BlazorTailwindToast.Configuration.ToastOptions()
        {
            Level = Level,
            Position = Position,
            Message = Message,
            Heading = Heading,
            Timeout = Timeout
        };

        if (IncludeAction)
        {
            options.ButtonLabel = "Action";
            options.OnClick = PostToConsole;
        }

        toastService.ShowToast(options);
    }

    private void AddRandom()
    {
        var level = (ToastLevel)rnd.Next(4);
        var position = (ToastPosition)rnd.Next(6);
        var timeout = 1000 + rnd.Next(4000);
        var heading = rnd.NextDouble() > 0.5 ? "Lucky heading" : "";
        var message = $"A message with timout of {timeout}ms";

        var options = new BlazorTailwindToast.Configuration.ToastOptions()
        {
            Level = level,
            Position = position,
            Message = message,
            Heading = heading,
            Timeout = timeout
        };

        if (rnd.NextDouble() > 0.5)
        {
            options.ButtonLabel = "Action";
            options.OnClick = PostToConsole;
        }

        toastService.ShowToast(options);
    }



}
